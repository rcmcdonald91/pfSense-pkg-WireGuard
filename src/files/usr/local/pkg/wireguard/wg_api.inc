<?php
/*
 * wg_api.inc
 *
 * part of pfSense (https://www.pfsense.org)
 * Copyright (c) 2021 Rubicon Communications, LLC (Netgate)
 * Copyright (c) 2021 R. Christian McDonald
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// pfSense includes
require_once('globals.inc');
require_once('config.inc');
require_once('pfsense-utils.inc');
require_once('system.inc');
require_once('pkg-utils.inc');
require_once('service-utils.inc');
require_once('util.inc');

// WireGuard includes
require_once('wireguard/wg_globals.inc');

// Get WireGuard status
function wg_status() {
	global $wgg;

	$status = array();
	exec("{$wgg['wg']} show all dump", $output);

	// If dump is specified, then several lines are printed; the first contains in order separated by tab: 
	// private-key, public-key, listen-port, fwmark. 
	// Subsequent lines are printed for each peer and contain in order separated by tab: 
	// public-key, preshared-key, endpoint, allowed-ips, latest-handshake, transfer-rx, transfer-tx, persistent-keepalive.


	foreach ($output as $key => $info) {
		$output[$key] = explode("\t", htmlspecialchars($info));
	}

	return $output;


}

function formatBytes($size, $precision = 2)
{
    $base = log($size, 1024);
    $suffixes = array('', 'K', 'M', 'G', 'T');   

    return round(pow(1024, $base - floor($base)), $precision) .' '. $suffixes[floor($base)];
}


function humanTiming ($time)
{

    $time = time() - $time; // to get the time since that moment
    $time = ($time<1)? 1 : $time;
    $tokens = array (
        31536000 => 'year',
        2592000 => 'month',
        604800 => 'week',
        86400 => 'day',
        3600 => 'hour',
        60 => 'minute',
        1 => 'second'
    );

    foreach ($tokens as $unit => $text) {
        if ($time < $unit) continue;
        $numberOfUnits = floor($time / $unit);
        return $numberOfUnits.' '.$text.(($numberOfUnits>1)?'s':'');
    }

}

function get_peer_name($publickey) {

global $wgg;
	foreach ($wgg['tunnels'] as $tunnel) {
		foreach ($tunnel['peers']['wgpeer'] as $peer) {
				if ($publickey == $peer['publickey']) {
					$retval = $peer['descr'];
					return $retval;
				}	
		}
	}
}

// Get WireGuard interface status
function wg_interface_status() {
	global $wgg;

	$status = array();
	exec("{$wgg['ifconfig']} -a -g {$wgg['if_group']}", $status);

	$output = implode("\n", $status);
	return htmlspecialchars($output);

}

// Get WireGuard kmod status
function wg_kmod_status() {
	global $wgg;

	$output = exec("{$wgg['kldstat']} | grep {$wgg['kmod']}");
	
	return htmlspecialchars($output);

}

// Get various package infos and return an array
function wg_pkg_info() {
	global $wgg;

	$packages = implode(" ", $wgg['pkg_names']);

	exec("{$wgg['pkg']} query '%n\t%v\t%c' {$packages}", $output);

	foreach ($output as $key => $package) {

		$output[$key] = explode("\t", htmlspecialchars($package));

	}

	return $output;

}

// Generate private key
function genKeyPair($json = false) {
	global $wgg;

	$privkey = exec("{$wgg['wg']} genkey");
	$pubkey = genPubKey($privkey);

	$res = array('privkey' => $privkey, 'pubkey' => $pubkey);
	return $json ? json_encode($res) : $res;

}

// Compose the public key from a provided private key
function genPubKey($privkey) {
	global $wgg;

	$pubkey = exec("echo {$privkey} | {$wgg['wg']} pubkey");

	return $pubkey;

}

// This soft resyncs a given WireGuard Tunnel (i.e. wg syncconf wgX <(wg-quick strip wgX))
function wg_syncconf($tunnel) {
	global $wgg;

	// Assume we have an interface first
	$wg_ifname = $tunnel;

	// Looks like we have a tunnel structure
	if (is_array($tunnel) && isset($tunnel['name'])) {

		// Transform to an interface name
		$wg_ifname = $tunnel['name'];

	}

	// Pass the stripped configuration to wg(8)
	$syncconf_command ="{$wgg['wg']} syncconf {$wg_ifname} <({$wgg['wg_quick']} strip {$wg_ifname})";

	$syncconf_command = escapeshellarg($syncconf_command);

	// We need <() process substitution, so use bash...might as well use bash everywhere?
	exec("{$wgg['bash']} -c {$syncconf_command}");

}

// Executes a wg-quick(8) action using a specified tunnel or interface
function exec_wg_quick_action($tunnel, $action, $verbose = false) {
	global $wgg;

	// Assume we have an interface first
	$wg_ifname = $tunnel;

	// Looks like we have a tunnel structure
	if (is_array($tunnel) && isset($tunnel['name'])) {

		// Transform to an interface name
		$wg_ifname = $tunnel['name'];

	}

	// Execute wg-quick(8) on the interface using the provided action 
	exec("{$wgg['wg_quick']} {$action} {$wg_ifname}" . verbose_pipe($verbose));

}

// Generate a pre-shared key
function genPSK() {
	global $wgg;

	$psk = exec("{$wgg['wg']} genpsk");

	return $psk;
	
}

// Return the next available WireGuard port
function next_wg_port() {
	global $config, $wgg;

	wg_globals();

	for ($idx=$wgg['default_port']; $idx<$wgg['max_port']; $idx++) {

		// Check to see if the port is already in use
		$found = false;

		foreach ($wgg['tunnels'] as $tunnel) {

			if ($tunnel['interface']['listenport'] == $idx) {

				$found = true;

				break;

			}

		}

		// If not, it can be used
		if (!$found) {

			return $idx;
			
		}

	}

	return $wgg['default_port'];

}

// Return the next available WireGuard interface
function next_wg_if() {
	global $config, $wgg;

	wg_globals();

	$used_ifs = array();

	foreach ($wgg['tunnels'] as $tunnel) {

		$used_ifs[] = $tunnel['name'];

	}

	for ($ifnum = 0; $ifnum < $wgg['max_tunnels']; $ifnum++) {

		$want_if = "{$wgg['if_prefix']}{$ifnum}";
		
		if (!in_array($want_if, $used_ifs)) {

			return $want_if;

		}

	}

	return -1;
	
}

function verbose_pipe($verbose) {

	return $verbose ? "" : " > /dev/null 2>&1";

}

?>